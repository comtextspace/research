Що може бути спільного між віктором глушковим і групою програм для управління базами даних під спільною назвою Постґрес?

Загорський Микола, м. Кєльце, Польша.

Смерть Віктора Глушкова і народження Постґресу розділяють кілька років і кілька тисяч кілометрів. Але, програмно-інженерна думка Стоунбрейкера, — засновника Постґресу, — як виявилося, має дуже багато спільного із тими підходами, котрі Глушков вважав плідними для майбутнього.

Почати варто з принципу єдності близьких і далеких цілей. За Глушковим він полягає у тому, що між кількох способів якоїсь інженерної праці треба вибирати не перший, що веде до успіху, а той, який разом із вирішенням поточної інженерної проблеми дозволяє закласти підмурівок для подальшого розвитку досліджень, більш широких і більш цікавих праць.

Кажучи словами з критики політичної економії, це тотожне тому, що поточна жива праця закладає умови полегшенню майбутньої живої праці, її вдосконаленню і розширенню, виробництву всебічно розвинених людей як творчих робітників.

Як цей принцип відноситься до Постґресу? Між кількох найбільш відомих і популярних систем управління реляційними базами даних (Oracle, PostgreSQL, MariaDB/MySQL, Firebird, SQLite, MS SQL, DB2) лише архітектура і історія Постґресу дозволяють побачити головні риси глушковської ідеї. Постґрес був закладений як університетське дослідження з архітектури програм, що управляють реляційними базами даних. Головна ідея полягала в тому, щоби максимально відсторонитись від якоїсь певної архітектури баз даних і максимально застосовувати модульний принцип, щоби без повної перекомпіляції всіх програм СУБД могла отримувати принципово нові функції. Наприклад за замовчанням Постґрес пропонував користувачам певний спосіб зберігання даних у файлах, але вони могли за аналогією написати свій модуль зберігання і застосовувати його поруч із стандартним або замість нього. Саме це стосувалося і типів даних. Стоунбрейкер розробив модульну систему, де кожен тип даних був реалізацією кількох певних функцій (операторів): перетворень з рядка у рядок, взаємних перетворень із іншими типами, рівняння, арифметичних дій (якщо вони придатні) і іншого. Таким чином Стоунбрейкер винайшов для себе той принцип програмної архітектури, який вже був відомим Глушкову за кілька років до того. Саме що, чим більш динамічною і здатною до змін є якась програмна система, тим більш вона стабільна.

Ймовірно, що розуміння природи стабільності у високій здатності до змін Глушков запозичив в Гегеля або в якогось російського гегельянця, твори якого він теж уважно читав. Стоунбрейкер під впливом досвіду розробки СУБД Інґрес наполягав на відмові від попередніх уявлень про архітектуру СУБД. Тому, максимально переносячи специфічні риси архітектури СУБД на додатково-підмінні модулі він, тим самим, заклав архітектурні принципи, що виявилися дуже широкими і життєздатними. Але комерційно підприємство Стоунбрейкера за рахунок замовлень від користувачів Потґресу не вижило, програмні коди всіх програм СУБД було усуспільнено у такому вигляді як вони лишилися після перших вдосконалень.

Стоунбрейкер запропонував колективний спосіб вдосконалення результатів своєї праці у якості головного і зайнявсь іншими речами. На відміну від авторів СУБД Оракл він не мав доступу до поліцейсько-військового замовлення або кредитних організацій. Ця ринкова слабкість раптом перетворилося на те, що зараз безкоштовний для користувачі і повністю відкритий для дослідження і допрацювання Постґрес офіційно вважається корпорацією Оракл головним конкурентом своїй відомій СУБД, коди якої на мовах програмування не є публічними. Тобто Стоунбрейкер заклав єдність близької і настільки далекої цілі, що сам не одразу уявив наскільки плідну і перспективну справу започаткував.

Додання підтримки мови SQL у 1995 році, а, дещо пізніше, і підтримки багатьох людських мов у рядках даних, і навіть у назвах об’єктів, - ось головні кроки що обумовили популярність Постґресу за рахунок вдалої модульної структури СУБД. Ця модульність і далі сприяє розвиткові Посґресу. Наприклад, у Оракл є механізм, де з одної БД Оракл можна звернутись по дані, що фізично розташовані у іншій базі даних, але тільки щоби вона теж була типу Оракл. У Постґрес, навпаки, було закладено модулі оболонок зовнішніх даних, що дозволяють користувачам без програмування звертатись по дані у таблицях інших, навіть не обов’язково що реляційних, баз даних. У архітектурах інших СУБД немає аналогів такого механізму, що він має безумовне значення щодо формування “єдиного інформаційного простору” у разі подолання комерційних таємниць.

Від сучасності перейдемо у історію і побачимо, на чому Глушков планував побудувати архітектуру зберігання даних ЗДАС. Згадаємо відомий принцип Глушкова: започаткувати принцип обліку, за чергою охопити ним всі зацікавлені організації на основі обов’язкової технічної реалізації і, згодом, поєднати цю групу облікових даних із іншими, котрі теж мають постати раніше або пізніше. Ця логіка, що очевидно має риси з творів Бенедикта Спінози, проте, не знаходить виразної підтримки у специфікації КОДАСИЛ/CODASYL (далі Кодасил). Про що йдеться? СУБД “ОКА”, що, разом із мовою програмування ПЛ-1 планувалася як основа архітектури зберігання даних ЗДАС, є ієрархічною базою даних. Це означає, що є поняття про початковий вузол і про те, що всі дані зберігаються за певною адресою, приблизно так як це робиться у файловій системі, котра теж є класичною (у Уніксах і Лінуксах) ієрархічною базою даних.

Приблизно так як і у файловій системі ми можемо домовитись, що за певною адресою зберігається рядок, а поруч буде файл із поштовим індексом, а поруч - із ознакою “так/ні”. Можемо навіть дописувати тип даних у спеціальних файлах, щоби контролювати типізацію основних файлів даних. Але ж у цьому процесі, що майже еквівалентний програмуванню зберігання даних у файловій системі, ніяк не можна побачити логіки Спінози — надання загального принципу цілісності ще до того, як започатковані окремі реалізації архітектури обліку і зберігання даних.

Напрямки Кодасил і СУБД “ОКА”, у якій ця специфікація була зразковою, пропонували зберігати кожному вузлу даних окрему типізацію у дусі перших версій XSD що описують типізацію у XML. До речі, як раз XSD і XML досі зберігають головні риси ієрархічних баз даних із всіма їхніми особливостями з винятком хіба що транзакційності. Очевидно що для усуспільнення даних вони непридатні, служачи, у кращому разі, його проміжними агентами. Це стосується не тільки програм на Кодасил і XML/XSD, але також нової пари - JOSN і JSONSchema. У всіх цих випадках праця з формування схеми даних (відповідь на питання “де що буде?”) не є принципово меншою за працю з формування саме даних.

На противагу ієрархічним СУБД, реляційні СУБД “діють” за Глушковим.

Будь-яке зберігання даних неможливо, допоки не створено таблицю, у якій названо, типізовано і позначено на обов’язковість заповнення стовпці (властивості). Після цього заповнення даних є типовим процесом із автоматичною перевіркою кожного нового рядка і технічними обмеженнями апаратури на противагу смисловим обмеженням інженера з обробки даних, котрий необхідний для усвідомлення результату додання даних у ієрархічних базах даних.

У них дані переважно самі собі є зразком, на той час як у реляційній моделі даних всі дані обмежені єдиним зразком (типізацією). Очевидно, що суспільні ідеї ЗДАС набагато легше знаходять реалізацію саме у реляційній моделі даних, котрі, теж невипадково, навіть зараз є найбільш розповсюдженими і популярними в порівнянні із СУБД інших моделей даних.

Ідея автоматичної фабрики, технічним розвитком якої є серія проектів ЗДАС, також передбачає економію праці з програмування, про котру вже замислювавсь Глушков, маючи зразком економію праці з проектування великих інтегральних схем. За рамками очевидної реалізації цієї ідеї у формі “банку програм” у “Центрпрограмсистемі” у м. Калінін, є також інша форма прояву економії цієї праці з програмування, котра, знову ж, найбільш помітна щодо саме реляційних баз даних. Ця економія найбільш помітна у СУБД саме “колективних” реляційних баз даних через те, що програмування авторів СУБД як головна частка “образу спільної праці із даними” використовується максимальну кількість разів, на той час, як у конкретній сфері застосовування лишається лише окремий проект структур даних, над якими передбачається колективна праця.

Не тільки такі широкі ідеї Віктора Глушкова, як ЗДАС, випередили свій час. Навіть декотрі його інженерні і технічно-архітектурні ідеї його випередили.

Минуло приблизно 50 років з того часу, як Глушков сформував свої головні суспільні, технічні і дослідницькі ідеї. Енґельс вважав, що науковці, котрі не вміють користати з діалектичного способу мислення у своїй сфері, роблять стан науки відсталим якраз на ті ж 50 років. І ми бачимо, що ідея про використання цілокупних принципів для зберігання даних, котра щодо ЗДАС знаходила невеличку підтримку у тогочасній техніці зберігання даних — ця ідея зараз є провідною у вигляді використання реляційних схем даних, котрі мають існувати до першого заповнення, та більш того, обумовлюють порядок заповнення даних у різних таблицях, якщо застосовано інструментарій зовнішнього ключа. За оцінками, 2019 року більш за 75% випадків застосовування баз даних у колективній праці - це реляційні бази даних. У окремій технічній сфері - це тріумф логіки Спінози, Геґеля і тих гегельянців, послідовником яких був Глушков.

Далі, ідея єдності близьких і далеких цілей блискуче спрацювала в М. Стоунбрейкера, котрий очолював створення перших форм настільки життєздатного програмного продукту, що, не зважаючи на комерційний провал Стоунбрейкера, розвиток його СУБД змогли підхопити сотні людей з різних країн і розвивати його на колективній основі безкоштовної праці і безкоштовного користування з цієї їхньої праці. Ідеї Глушкова і Китова про єдиний інформаційний простір у найбільш економній формі без програмування знову ж можуть бути технічно втіленими зараз у першу чергу у Постґресі із його концепцією оболонок зовнішніх даних із доступом до різних інших баз даних, не обов’язково реляційних СУБД. За технічними відповідниками своїх ідей Глушков не тільки лишається нашим сучасником, він все ще дещо обганяє сучасну техніку. Тому неймовірно цікавим у історичних документах і книгах Глушкова є те, як він на недосконалій техніці свого часу планує втілення ідей, котрі на кілька порядків спрощуються за наявністю сучасної апаратної і програмної техніки з обробки даних.