import{_ as p,c as l,a as e,b as a,d as r,w as o,e as i,r as s,o as u}from"./app-dfCIEjaq.js";const d="/images/git-guide/00.png",m="/images/git-guide/01_1.png",f="/images/git-guide/01.png",c="/images/git-guide/02.png",h="/images/git-guide/03.png",b="/images/git-guide/04.png",_="/images/git-guide/05.png",x="/images/git-guide/06.png",D="/images/git-guide/07.png",k="/images/git-guide/08.png",B="/images/git-guide/09.png",q="/images/git-guide/10.png",v="/images/git-guide/12.png",C="/images/git-guide/13.png",w="/images/git-guide/14.png",G="/images/git-guide/15.png",P="/images/git-guide/16.png",F="/images/git-guide/17.png",T="/images/git-guide/18.png",y="/images/git-guide/20.png",H="/images/git-guide/21.png",S={},N={class:"table-of-contents"};function O(R,t){const n=s("router-link"),g=s("RouteLink");return u(),l("div",null,[t[9]||(t[9]=e("h1",{id:"инструкция-текстологическои-работы",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#инструкция-текстологическои-работы"},[e("span",null,"Инструкция текстологической работы")])],-1)),e("nav",N,[e("ul",null,[e("li",null,[r(n,{to:"#введение"},{default:o(()=>t[0]||(t[0]=[i("Введение")])),_:1})]),e("li",null,[r(n,{to:"#хранение-материалов"},{default:o(()=>t[1]||(t[1]=[i("Хранение материалов")])),_:1})]),e("li",null,[r(n,{to:"#редактирование-на-саите"},{default:o(()=>t[2]||(t[2]=[i("Редактирование на сайте")])),_:1})]),e("li",null,[r(n,{to:"#редактирование-в-локальнои-копии"},{default:o(()=>t[3]||(t[3]=[i("Редактирование в локальной копии")])),_:1})]),e("li",null,[r(n,{to:"#процесс-вычитки"},{default:o(()=>t[4]||(t[4]=[i("Процесс вычитки")])),_:1})]),e("li",null,[r(n,{to:"#формат-разметки"},{default:o(()=>t[5]||(t[5]=[i("Формат разметки")])),_:1})]),e("li",null,[r(n,{to:"#заключение"},{default:o(()=>t[6]||(t[6]=[i("Заключение")])),_:1})])])]),t[10]||(t[10]=a('<h2 id="введение" tabindex="-1"><a class="header-anchor" href="#введение"><span>Введение</span></a></h2><p>В этом документе собраны инструкции по работе над оцифровкой полного собрания сочинений Н. Г. Чернышевского.</p><h2 id="хранение-материалов" tabindex="-1"><a class="header-anchor" href="#хранение-материалов"><span>Хранение материалов</span></a></h2><p>В данный момент для вычитки используется система контроля версий <a href="https://git-scm.com/book/ru/v2/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%9E-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B5-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8F-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B9" target="_blank" rel="noopener noreferrer">Git</a>. Более подробно ознакомиться с работой системы можно по выше приведенной ссылке. При желании можно вкратце ознакомиться с чаще всего используемыми <a href="https://recrutach.ru/github_3" target="_blank" rel="noopener noreferrer">терминами</a>.</p><p>Данная система позволяет группе людей работать над одним набором файлов. Система отслеживает изменения, вносимые каждым участником, и позволяет комбинировать их таким образом, чтобы избежать конфликтов версий. Такой конфликт представить не сложно. Допустим, что текстологи Василий и Андрей работают над одним и тем же томом. Андрей вычитывает и вносит поправки в первую часть тома, Василий — во вторую. Без использования сторонних систем Василию и Андрею придётся дополнительно потрудиться, а именно — из двух полуготовых файлов собрать один, в который будут внесены правки их обоих. Система Git делает это автоматически и таким образом экономит труд наших текстологов. Представьте, что редактируемый Василием и Андреем файл загружен на сервер. Василий и Андрей каждый копируют этот файл, и каждый вносит свои изменения в свою локальную копию. Далее они оба загружают свои версии файлов обратно на сервер. Система Git проверяет файлы — сравнивает их, обозначает их различия с основной версией файла на сервере. Оператор системы несколькими нажатиями клавиш подтверждает изменения, разрешает конфликты, если это необходимо, и обновленная версия файла становится основной, которую копируют уже следующие текстологи.</p><p>Для работы системы Git нужен сервер на котором хранится текущая версия вычитываемого файла. В данный момент мы используем сервис GitHub, по адресу: <a href="https://github.com" target="_blank" rel="noopener noreferrer">https://github.com</a>. Этот сервис требует регистрации и поэтому первый шаг — завести на нём учётную запись.</p><h2 id="редактирование-на-саите" tabindex="-1"><a class="header-anchor" href="#редактирование-на-саите"><span>Редактирование на сайте</span></a></h2><p>После регистрации переходим по ссылке на наш <a href="https://github.com/comtextspace/books" target="_blank" rel="noopener noreferrer">репозиторий</a>. Чтобы напрямую вносить изменения в репозиторий, вам должны быть выданы права редактирования основного репозитория. Такие права выдаются лишь проверенным участникам. Новым участникам нужно создать <em>форк</em>-репозиторий, или попросту говоря копию. Для этого нужно нажать на кнопку <strong>Fork</strong> в верхнем правом углу экрана:</p><p><img src="'+d+'" alt="Создание форка">.</p><p>После нажатия на эту кнопку, будет создана копия основного репозитория. На данном этапе вы уже можете редактировать текст и предлагать свои правки в основной репозиторий. Для этого нужно нажать на ссылку тома<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> например <em>Т02</em>, выбрать редактируемый файл, например <code>2_005_092.md</code> перед вами откроется подобное окно:</p><figure><img src="'+m+'" alt="Редактирование на сайте" tabindex="0"><figcaption>Редактирование на сайте</figcaption></figure><p>Нажав на символ карандаша, вы переходите в окно простенького текстового редактора. Внеся изменения, вы можете их зафиксировать нажав на <strong>commit changes</strong> (зафиксировать изменения). Перед этим вы можете выбрать вносить изменения в главную ветку репозитория (main branch) или для своих изменений создать новую ветку. В нашем случае, изменения внесены сразу в главную ветку форка. Если выбрать опцию создания новой ветки, то система автоматически создаст копию редактируемых файлов. Это может быть полезно в том случае если ваши изменения по той или иной причине не подойдут в основной репозиторий — тогда ветку можно просто удалить, а main вашего форка не будет отличаться от main основного репозитория.</p><figure><img src="'+f+'" alt="Внесение изменений" tabindex="0"><figcaption>Внесение изменений</figcaption></figure><p>Вы внесли изменения в вами созданную копию репозитория. Чтобы предложить эти изменения в основной репозиторий нужно создать <strong>pull request</strong>. Для этого возвращаемся во вкладку <strong>Code</strong> форка. Если изменения зафиксированы правильно, появится надпись, сообщающая о том, что ваша ветка (ваш форк) опережает основную ветку на 1 коммит. Чтобы предложить своё изменение в основной репозиторий, нажимаем <strong>Contribute</strong> и <strong>Open pull request</strong> в появившемся окне</p><figure><img src="'+c+'" alt="Создание пул реквеста" tabindex="0"><figcaption>Создание пул реквеста</figcaption></figure><p>Откроется окно, в котором будут обозначены внесённые вами изменения, а так же дополнительная информация о конфликтах версий.</p><figure><img src="'+h+'" alt="Создание пул реквеста" tabindex="0"><figcaption>Создание пул реквеста</figcaption></figure><p>Нажимаем на <strong>Create pull request</strong>. В открывшемся текстовом окне заполняем информацию об изменении и ещё раз нажимаем на <strong>Create pull request</strong>.</p><figure><img src="'+b+'" alt="Создание пул реквеста" tabindex="0"><figcaption>Создание пул реквеста</figcaption></figure><p>Теперь в основном репозитории проекта, во вкладке <strong>Pull requests</strong> появится ваше изменения. Как только один из модераторов его просмотрит и примет ваши изменения будут внесены в основной проект.</p><figure><img src="'+_+'" alt="Создание пул реквеста" tabindex="0"><figcaption>Создание пул реквеста</figcaption></figure><p>Так же важно следить, чтобы ваш форк-репозиторий не отставал от основного. Для этого его нужно регулярно обновлять. В любой момент открыв вкладку <strong>Code</strong> вашего форка вы можете увидеть, как он соотносится с основным репозиторием. В нашем примере, форк отстаёт на 4 коммита. Попросту говоря в основной репозиторий внесены 4 новых правки, которых нету в вашем репозитории. Для того, чтобы эти правки скопировать себе, нажимаем на <strong>Fetch upstream</strong> и далее на <strong>Fetch and merge</strong>.</p><figure><img src="'+x+'" alt="Обновление форка" tabindex="0"><figcaption>Обновление форка</figcaption></figure><p>Обновления будут внесены в ваш форк. По окончанию процесса ваш форк вновь соответствует основному репозиторию.</p><figure><img src="'+D+'" alt="Обновление форка" tabindex="0"><figcaption>Обновление форка</figcaption></figure><p>Такое обновление следует делать каждый раз, когда вы начинаете вычитку нового отрывка.</p><p>Более подробно редактирование через веб интерфейс описано здесь: <a href="https://starkovden.github.io/Pull-request-workflows.html" target="_blank" rel="noopener noreferrer">Практическое занятие &quot;Процесс Pull request на GitHub&quot;</a>.</p><p>Итого, схема редактирования через сайт GitHub сводиться к шагам:</p><ol><li>Сделать форк репозитория;</li><li>Отредактировать файл в браузере;</li><li>Зафиксировать изменения;</li><li>Сделать pull request.</li></ol><h2 id="редактирование-в-локальнои-копии" tabindex="-1"><a class="header-anchor" href="#редактирование-в-локальнои-копии"><span>Редактирование в локальной копии</span></a></h2><p>Хотя для мелких правок способ редактирования через веб интерфейс вполне приемлем, работа с определённой разметкой (о том, что такое разметка, поговорим дальше) и большими объёмами текста легче осуществляется через специальные текстовые редакторы. Для того, чтобы использовать свой текстовый редактор, нам будет нужна локальная копия репозитория у себя на устройстве. Для создания и поддержания такой копии, нам пригодится программа GitHub Desktop. Её скачать можно по адресу: <a href="https://desktop.github.com/" target="_blank" rel="noopener noreferrer">https://desktop.github.com</a>. После установки нужно авторизироваться в программе используя логин и пароль, которые вы создали при регистрации на сайте github.</p><p>Для авторизации запускаем программу, в верхнем меню выбираем <strong>File — Options — Accounts</strong>. Во вкладке <strong>Github.com</strong> нажимаем <strong>Sign in</strong>. [Если вы авторизовались при установке клиента, этот шаг можно пропустить]</p><figure><img src="'+k+'" alt="Авторизация" tabindex="0"><figcaption>Авторизация</figcaption></figure><p>Вас попросят авторизоваться через браузер. Соглашаемся. В открывшемся окне браузера позволяем программе Github Desktop открыть ссылку.</p><figure><img src="'+B+'" alt="Авторизация" tabindex="0"><figcaption>Авторизация</figcaption></figure><p>Если всё прошло успешно, то перейдя в <strong>File — Options — Accounts</strong> вы будете видеть имя своей учётной записи на GitHub.</p><p>Когда программа установлена, можно приступать к &quot;клонированию&quot; нужного репозитория. Для этого выбираем в верхнем меню <strong>File</strong> пункт <strong>Clone repository</strong> или используем комбинацию клавиш <code>Ctrl+Shift+O</code>.</p><p>В появившемся окне выбираем вкладку URL, вводим адрес копируемого репозитория. Адрес своего форка можно найти на странице форка, нажав на зеленую кнопку <strong>Code</strong> и скопировав ссылку во вкладке <strong>HTTPS</strong>.</p><figure><img src="'+q+'" alt="Выбор пути" tabindex="0"><figcaption>Выбор пути</figcaption></figure><p>После, нажимаем на &quot;clone&quot; и ждём пока репозиторий скачается на устройство. После этого появится окно диалога, спрашивающее для чего вы будете использовать репозиторий. Выбираем опцию <strong>To contribute to the parent project</strong></p><figure><img src="'+v+'" alt="Настройки репозитория" tabindex="0"><figcaption>Настройки репозитория</figcaption></figure><p>Теперь локальная копия вашего форк-репозитория доступна на вашем устройстве.</p><figure><img src="'+C+'" alt="Настройки репозитория" tabindex="0"><figcaption>Настройки репозитория</figcaption></figure><p>Из главного окна программы вы можете открыть копию репозитория у вас на компьютере комбинацией клавиш <code>Ctrl+Shift+F</code> либо нажав на соответствующую кнопку в главном окне.</p><p>Процесс внесения изменений схож с тем, каким образом изменения вносились в веб интерфейсе, с некоторыми отличиями. Для начала, создаём новую ветку выбрав вкладку <strong>Current branch — New Branch</strong>.</p><figure><img src="'+w+'" alt="Внесение изменений" tabindex="0"><figcaption>Внесение изменений</figcaption></figure><p>Название можно выбрать любое. Обычно используется нумерация страниц вычитываемого отрывка, например 395_405 и т. п.</p><p>Заметьте, что после создания новой ветки <strong>Current branch</strong> сменилась с main на новую ветку. Во время работы вы можете свободно переключаться между ветками. Те изменения, которые вы вносите в новую ветку, не будут изменять вашу основную ветку.</p><p>После создания новой ветки, нужно открыть вычитываемый отрывок, внести и сохранить в него изменения. Каждое изменение будет фиксироваться в программе.</p><figure><img src="'+G+'" alt="Внесение изменений" tabindex="0"><figcaption>Внесение изменений</figcaption></figure><p>Вычитку можно проводить в один присест, или в несколько — это не имеет значения. Файл изменяется привычным образом - каждый раз закончив работу в редакторе, сохраняем изменения через <strong>File — Save</strong>.</p><p>Как только вычитка отрывка закончена, изменения нужно зафиксировать в программе. Для этого в левом нижнем углу экрана заполняем название, описываем сделанные в тексте изменения и нажимаем commit to <em>название ветки</em></p><figure><img src="'+P+'" alt="Внесение изменений" tabindex="0"><figcaption>Внесение изменений</figcaption></figure><p>Теперь ваши изменения зафиксированы <strong>в вашей копии репозитория</strong>. Далее необходимо эти изменения внести в основной репозиторий. Как и в случае редактирования в веб интерфейсе, нужно создать <strong>pull request</strong>.</p><p>Чтобы создать пулл реквест, нужно сначала созданую ветку опубликовать на сервере гитхаба. Это сделать можно нажав на <strong>Publish Branch</strong></p><figure><img src="'+F+'" alt="Внесение изменений" tabindex="0"><figcaption>Внесение изменений</figcaption></figure><p>Теперь эта ветка видна в списке веток вашего форка. Но это нам не так важно. Создать пулл реквест можно прямо из программы. После публикации ветки на месте <strong>publish branch</strong> появляется <strong>create pull request</strong>. Нажатие на эту кнопку откроет окно браузера, идентичное тому, которое мы заполняли при создании пулл реквеста ранее.</p><figure><img src="'+T+'" alt="Внесение изменений" tabindex="0"><figcaption>Внесение изменений</figcaption></figure><p>Процесс тот же — заполняем информацию об вносимых изменениях, нажимаем зеленую кнопку <strong>Create pull request</strong> и ждём, пока ваши изменения одобрит модератор.</p><p>Как только ваши изменения будут приняты, удаляем свою ветку. Это можно сделать в списке веток, нажав правой кнопкой и выбрав опцию <strong>delete</strong></p><p>После удаления, обновляем свой репозиторий на сайте через опцию <strong>Fetch upstream</strong>. Таким образом ваши изменения попадут в вашу ветку main.</p><p><strong>Внимание</strong>- не удаляйте ветку до того, как будет принят ваш <strong>pull request</strong></p><p>В итоге процесс редактирования через локальную копию сводиться к шагам:</p><ol><li>Сделать форк репозитория;</li><li>Выгрузить форк к себе на компьютер через GitHub Desctop;</li><li>Сделать отдельную ветку;</li><li>Отредактировать файлы;</li><li>Зафиксировать изменения;</li><li>Сделать pull request.</li></ol><h2 id="процесс-вычитки" tabindex="-1"><a class="header-anchor" href="#процесс-вычитки"><span>Процесс вычитки</span></a></h2><p>Ну вот мы и разобрались с системой контроля версий. Теперь можно перейти к самой работе с текстом.</p><p>Во-первых, нужно выбрать текстовый редактор с которым будем работать. Никаких специфических требований здесь нет — если у вас имеется свой любимый редактор, то можете работать в нём. Для тех у кого таких предпочтений нет рекомендуем использовать <a href="https://typora.io/" target="_blank" rel="noopener noreferrer"><em>Typora</em></a>. Почему именно этот редактор? Всё очень просто — формат нашей разметки <a href="/format-comtext">ComText</a> основан на известном формате <a href="https://www.markdownguide.org" target="_blank" rel="noopener noreferrer">Markdown</a>. Типора является специальным текстовым редактором для работы с маркдаун. Это значит, что этот редактор понимает разметку формата маркдаун и её визуализирует, а так же облегчает внедрение разметки в текст.</p><p>Возможно тут вы хотите спросить — а что такое разметка? Давайте разберёмся.</p><p>Вообще, цель нашей работы это создать <a href="http://propaganda-journal.net/10569.html" target="_blank" rel="noopener noreferrer"><em>тщательно выверенную и подходящую для дальнейшего изучения версию авторского текста</em></a>. Когда речь идёт о простой последовательности символов текста всё довольно понятно — мы следим, чтобы текст в редакторе соответствовал тексту с фотографии книги (будь она в формате pdf или djvu). Но что делать, когда мы встречаем тот или иной способ авторского выделения текста?</p><figure><img src="'+y+`" alt="Разметка" tabindex="0"><figcaption>Разметка</figcaption></figure><p>Слова &quot;до некоторой степени&quot; автором намеренно выделены из остального текста, и если это выделение никак не обозначить - часть смысла текста пропадёт, а мы провалим задачу по &quot;наиболее тщательному выверению...&quot;. Вопрос решается просто — в текстовой последовательности эти слова нужно пометить какой-нибудь меткой, чтобы читатель знал — ага, тут значит есть курсив.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">зраком скрывается истина, потому что в определенной идее действительно осуществляется до *некоторой степени* общая идея, а определенная идея осуществляется до некоторой степени в отдельном предмете.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>В нашем случае эти слова мы выделили с двух сторон звёздочками *. Вообще, конечно, выделять этот текст можно как угодно. Главное всем договориться и выделять однообразно, т. е. чтобы текстологи Василий и Андрей, встретив в тексте курсив, обозначали его той же меткой. В нашей работе мы основываемся на формате разметки markdown. Этот формат подразумевает, что курсив выделяется звёздочками с двух сторон. А это, в свою очередь, означает, что текстовый редактор, работающий на основе markdown, эти метки будет интерпретировать как текст <em>написаный курсивом</em> (и, соответственно, так и отобразит на экране). Это удобно, потому что с текстолога-читателя снимается обязанность запоминать весь формат разметки, за вас это делает машина. Поэтому чтобы в типоре обозначить текст курсивом - достаточно выделить его и нажать комбинацию клавиш <code>ctrl+I</code>. Тоже самое относится к другим типам выделения.</p><p>Типора большую часть работы по разметке берёт на себя — и всё было бы отлично, но в сочинениях Н. Г. Чернышевского есть такие формы разметки, которые не поддерживает формат разметки markdown и, соответственно, типора. Например, чтобы облегчить работу с изданием, мы решили в гипертексте оставить обозначения страниц оригинала. Это облегчает сверку и цитирование и является несомненным плюсом для гипертекста, но отдельной &quot;метки страницы&quot; в разметке маркдаун нет. Что делать? Один способ — искать уже готовый формат разметки и работать с ним. Но зачастую уже готовые форматы разметки оказываются чрезмерными для нашей задачи. Поэтому было решено разработать свой формат разметки на основе маркадун — <a href="/format-comtext">ComText</a>.</p><p>ComText разрабатывается нами и поэтому может включить в себя всё, что необходимо для нашей работы. Мы считаем так же, что в перспективе он может быть использован товарищами из других стран. Внедрение и распространение одного формата позволило бы легко обмениваться литературными источниками по всему миру. Но пока, это планы. Вернёмся к делам насущным.</p><p>Как мы уже говорили, формат ComText основан на маркдауне, поэтому для работы с ним подойдёт типора. Процесс вычитки начинаем с того, что скачиваем сканы вычитываемого текста [ссылка]. Далее параллельно открываем скан текста, и гипертекст в типоре.</p><figure><img src="`+H+'" alt="Разметка" tabindex="0"><figcaption>Разметка</figcaption></figure><p>Начинаем процесс присвоения классической мысли человечества. Так же краем глаза следим, чтобы текст в типоре соответствовал тексту в скане. Опечатки, знаки препинания - всё это крайне важно. Если встречаете некий способ выделения, и не знаете что делать дальше — сверьтесь с прилагаемым описанием формата. Если в формате не описан нужный способ разметки - выносите проблему на обсуждение с товарищами.</p><h2 id="формат-разметки" tabindex="-1"><a class="header-anchor" href="#формат-разметки"><span>Формат разметки</span></a></h2>',79)),e("p",null,[r(g,{to:"/format-comtext.html"},{default:o(()=>t[7]||(t[7]=[i("Описание формата разметки книг")])),_:1}),t[8]||(t[8]=i("."))]),t[11]||(t[11]=a('<h2 id="заключение" tabindex="-1"><a class="header-anchor" href="#заключение"><span>Заключение</span></a></h2><p>Приведенные здесь инструкции на первый взгляд могут показаться чрезмерно усложняющими работу с текстом. Но если вы посмотрите на них поближе то... ничего не изменится, освоить работу с системой контроля версий и разметкой действительно непросто и потребует практических усилий. К счастью, наши товарищи разрабатывают систему, которая в будущем позволит весь формальный труд, не относящийся напрямую к текстологическому, передать машине. А пока что воспринимайте это как гимнастику ума и освоение новых навыков.</p><p>В случае если у вас остались какие-либо вопросы, то смело обращайтесь к товарищам.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Заметьте, что редактировать файлы вы можете только в собственном форке. В каком точно репозитории вы находитесь можно понять посмотрев в верхний левый угол. Если вы находитесь в своём форке, то там будет написано <code>ВашНикнейм / books</code>. Если вы в основном репозитории, то там будет написано <code>comtextspace / books</code>.) <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>',5))])}const E=p(S,[["render",O]]),V=JSON.parse('{"path":"/git-guide.html","title":"Инструкция текстологической работы","lang":"ru-RU","frontmatter":{},"git":{"updatedTime":1744703116000,"contributors":[{"name":"Petro","username":"Petro","email":"petrovdrm86@yandex.ru","commits":4,"url":"https://github.com/Petro"}],"changelog":[{"hash":"9ac52f33286ae633d2fedf0a0a9342c3b07457eb","time":1744703116000,"email":"petrovdrm86@yandex.ru","author":"Petro","message":"Update git-guide.md"},{"hash":"3a4919cd9168b0dc930909dd1483939adbb9ad68","time":1744698863000,"email":"petrovdrm86@yandex.ru","author":"Petro","message":"upd"},{"hash":"2bffde92e1288c8e4eddb09b9249bb84263b2143","time":1698840115000,"email":"petrovdrm86@yandex.ru","author":"Petro","message":"fix"},{"hash":"ba28c5a244fe9ea20665820e1fd0f94f59aa47d9","time":1698839746000,"email":"petrovdrm86@yandex.ru","author":"Petro","message":"add from wiki"}]},"filePathRelative":"git-guide.md"}');export{E as comp,V as data};
